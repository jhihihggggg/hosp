#!/usr/bin/env python
"""
Create doctors matching the Universal Health Services & Diagnostic Center signboard
"""
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'diagcenter.settings')
django.setup()

from django.contrib.auth import get_user_model

User = get_user_model()

# Doctor data from the signboard images
doctors_data = [
    {
        'first_name': 'рж╢рж╛ржХрзЗржм',
        'last_name': 'рж╕рзБрж▓рждрж╛ржирж╛',
        'username': 'dr_shakeb_sultana',
        'specialization': 'ржХрзНржпрж╛ржирзНрж╕рж╛рж░ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ',
        'qualification': '''ржПржоржмрж┐ржмрж┐ржПрж╕, ржПржо. ржлрж┐рж▓ (рж░рзЗржбрж┐ржпрж╝рзЗрж╢ржи ржЕржиржХрзЛрж▓рж╛ржЬ)
ржкрж┐ржЬрж┐ржЯрж┐ (ржорзЗржбрж┐рж╕рж┐ржи), ржбрж┐ржПржоржЗржЙ (ржврж╛ржХрж╛)''',
        'email': 'dr.shakeb@universalhealthbd.com',
        'timing': 'ржкрзНрж░рждрж┐ржжрж┐ржи рж╕ржХрж╛рж▓ рззрзжржЯрж╛ рж╣ржЗрждрзЗ рж░рж╛ржд рзмржЯрж╛ ржкрж░рзНржпржирзНржд',
    },
    {
        'first_name': 'ржЖржпрж╝рзЗрж╢рж╛',
        'last_name': 'ржЫрж┐ржжрзНржжрж┐ржХрж╛',
        'username': 'dr_ayesha_siddika',
        'specialization': 'ржкрзНрж░рж╕рзВрждрж┐, ржЧрж╛ржЗржирзА, ржорзЗржбрж┐рж╕рж┐ржи, рж╣рж░ржорзЛржи ржУ ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕ рж░рзЛржЧ ржЪрж┐ржХрж┐рзОрж╕ржХ',
        'qualification': '''ржПржоржмрж┐ржмрж┐ржПрж╕ (рж░рж╛ржЬ), ржмрж┐.рж╕рж┐.ржПрж╕ (рж╕рзНржмрж╛рж╕рзНржерзНржп)
ржПржл рж╕рж┐ ржЬрж┐ ржкрж┐ (ржПржлржкрж┐), ржорзЗржбрж┐рж╕рж┐ржи (ржПржирзНржбрзЛржХрзНрж░рж╛ржЗржирзЛрж▓ржЬрж┐)
ржорзЗржбрж┐ржХрзЗрж▓ ржЕржлрж┐рж╕рж╛рж░, ржЙржкржЬрзЗрж▓рж╛ рж╕рзНржмрж╛рж╕рзНржерзНржп ржХржоржкрзНрж▓рзЗржХрзНрж╕, ржкрждрзНржирзАрждрж▓рж╛, ржиржУржЧрж╛ржБред''',
        'email': 'dr.ayesha@universalhealthbd.com',
        'timing': 'ржкрзНрж░рждрж┐ржжрж┐ржи ржмрж┐ржХрж╛рж▓ рзйржЯрж╛ ржерзЗржХрзЗ рж░рж╛ржд рзоржЯрж╛ ржкрж░рзНржпржирзНржд',
    },
    {
        'first_name': 'ржЦрж╛ржЬрж╛ ржЖржорж┐рж░рзБрж▓',
        'last_name': 'ржЗрж╕рж▓рж╛ржо',
        'username': 'dr_khaja_amirul',
        'specialization': 'ржерзНржпрж╛рж▓рж╛рж╕рзЗржорж┐ржпрж╝рж╛ ржУ рж░ржХрзНржд рж░рзЛржЧ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ',
        'qualification': '''ржПржоржмрж┐ржмрж┐ржПрж╕, ржПржоржбрж┐
ржлрзЗрж▓рзЛ- ржЗржЙрж░рзЛржкрж┐ржпрж╝рж╛ржи рж╣рзЗржорж╛ржЯрзЛрж▓ржЬрж┐ ржПрж╕рзЛрж╕рж┐ржпрж╝рзЗрж╢ржи ржорж╛рж╕рзНржЯрж╛рж░ ржХрзЛрж░рзНрж╕
рж╕рж╣ржХрж╛рж░рзА ржЕржзрзНржпрж╛ржкржХ ржУ ржмрж┐ржнрж╛ржЧрзАржпрж╝ ржкрзНрж░ржзрж╛ржи
ржЯрж┐ржПржоржПрж╕ржПрж╕ рж╣рзЗржорж╛ржЯрзЛрж▓ржЬрж┐ ржУ ржмрзЛржи ржорзНржпрж╛рж░рзЛ ржЯрзНрж░рж╛ржирзНрж╕ржкрзНрж▓рж╛ржирзНржЯ рж╕рзЗржирзНржЯрж╛рж░''',
        'email': 'dr.khaja@universalhealthbd.com',
        'timing': 'ржкрзНрж░рждрж┐ржжрж┐ржи рж╕ржХрж╛рж▓ рззрзжржЯрж╛ рж╣ржЗрждрзЗ рж░рж╛ржд рзмржЯрж╛ ржкрж░рзНржпржирзНржд',
    },
    {
        'first_name': 'ржПрж╕.ржПржо. ржЦрж╛рж▓рж┐ржж',
        'last_name': 'рж╕рж╛ржЗржлрзВрж▓рзНрж▓рж╛рж╣',
        'username': 'dr_khalid_saifullah',
        'specialization': 'ржорзЗржбрж┐рж╕рж┐ржи, рж╣рж╛ржбрж╝ржЬрзЛржбрж╝рж╛, ржмрж╛ржд-ржмрзНржпрж╛ржерж╛, рж╕рж╛рж░рзНржЬрж╛рж░рж┐ ржУ ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕ рж░рзЛржЧ ржЕржнрж┐ржЬрзНржЮ ржПржмржВ рж╕рзЛржирзЛрж▓рзЛржЬрж┐рж╕рзНржЯ',
        'qualification': '''ржПржоржмрж┐ржмрж┐ржПрж╕ (рж░рж╛ржЬ), ржмрж┐.рж╕рж┐.ржПрж╕ (рж╕рзНржмрж╛рж╕рзНржерзНржп)
ржПржл.рж╕рж┐.ржкрж┐.ржПрж╕ (рж╕рж╛рж░рзНржЬрж╛рж░рзА ржЯрзНрж░рзЗржирж┐), рж╕рж┐.ржкрж┐.ржбрж┐ (ржмрж╛рж░ржбрзЗржо)
ржЖржЗ, ржПржо, рж╕рж┐, ржЖржЗ (рж╢рж┐рж╢рзБ) ржкрж┐ржЬрж┐ржЯрж┐ (ржЕрж░рзНржерзЛ-рж╕рж╛рж░рзНржЬрж╛рж░рзА)
ржЙржкржЬрзЗрж▓рж╛ рж╕рзНржмрж╛рж╕рзНржерзНржп ржУ ржкржГржкржГ ржХрж░рзНржоржХрж░рзНрждрж╛, ржкрждрзНржирзАрждрж▓рж╛, ржиржУржЧрж╛ржБред''',
        'email': 'dr.khalid@universalhealthbd.com',
        'timing': 'ржирж┐ржпрж╝ржорж┐ржд ржкрзНрж░рждрж┐ ржмрзГрж╣рж╕рзНржкрждрж┐ржмрж╛рж░ рж╕ржирзНржзрзНржпрж╛ рзнржЯрж╛ рж╣ржЗрждрзЗ рж░рж╛ржд рзпржЯрж╛ ржкрж░рзНржпржирзНржд',
    },
]

def create_doctors():
    """Create doctor users"""
    print("Creating doctors from Universal Health Services signboard...\n")
    
    for doctor_data in doctors_data:
        username = doctor_data['username']
        
        # Check if doctor already exists
        if User.objects.filter(username=username).exists():
            print(f"тЬУ Doctor {username} already exists, updating...")
            doctor = User.objects.get(username=username)
        else:
            print(f"+ Creating new doctor: {username}")
            doctor = User.objects.create_user(
                username=username,
                password='doctor123',  # Default password
                email=doctor_data['email'],
            )
        
        # Update fields
        doctor.first_name = doctor_data['first_name']
        doctor.last_name = doctor_data['last_name']
        doctor.role = 'DOCTOR'
        doctor.specialization = doctor_data['specialization']
        doctor.qualification = doctor_data['qualification']
        doctor.is_active = True
        doctor.save()
        
        print(f"  Name: ржбрж╛ржГ {doctor.get_full_name()}")
        print(f"  Specialty: {doctor.specialization}")
        print(f"  Email: {doctor.email}")
        print()
    
    print(f"\nтЬЕ Successfully created/updated {len(doctors_data)} doctors!")
    print("\nAll doctors are ready to see patients at:")
    print("ЁЯУН Universal Health Services & Diagnostic Center")
    print("ЁЯУН ржЗржЙржирж┐ржнрж╛рж░рзНрж╕рж╛рж▓ рж╣рзЗрж▓рже рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж╕ ржПржирзНржб ржбрж╛ржпрж╝рж╛ржЧржирж╕рзНржЯрж┐ржХ рж╕рзЗржирзНржЯрж╛рж░")
    print("ЁЯУН рж╕рж╛ржжрж┐ржпрж╝рж╛ ржкрзНржпрж╛рж▓рзЗрж╕, ржмрж╛ржЬрж╛рж░ рж░рзЛржб, ржиржЬрж┐ржкрзБрж░ рж╕рж░ржжрж╛рж░ржкрж╛ржбрж╝рж╛ ржорзЛржбрж╝, ржиржЬрж┐ржкрзБрж░ ржкрзМрж░рж╕ржж, ржкрждрзНржирзАрждрж▓рж╛, ржиржУржЧрж╛ржБ")
    print("ЁЯУЮ ржорзЛржмрж╛ржЗрж▓: рзжрззрзнрзйрзи-рзорзлрзйрзйрзжрзй")
    print("\nтП░ рж░рзЛржЧрзА ржжрзЗржЦрж╛рж░ рж╕ржоржпрж╝ (ржкрзНрж░рждрж┐ржЯрж┐ ржбрж╛ржХрзНрждрж╛рж░рзЗрж░ ржЬржирзНржп ржЖрж▓рж╛ржжрж╛):")
    for doctor_data in doctors_data:
        print(f"   - ржбрж╛ржГ {doctor_data['first_name']} {doctor_data['last_name']}: {doctor_data['timing']}")

if __name__ == '__main__':
    create_doctors()
